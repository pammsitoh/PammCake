const path = require("path");
const fs = require("fs");
const uuid = require("uuid");

class AddonBehavior {
    /** @param {AddonManager} manager */
    constructor(manager) {
        this.manager = manager;
    }

    async setup() {
        this.setManifest({
            format_version: 2,
            header: {
                description: "pack.description",
                name: "pack.name",
                uuid: uuid.v4(),
                min_engine_version: [1, 20, 40],
                version: [1, 0, 0],
            },
            modules: [
                {
                    type: "data",
                    uuid: uuid.v4(),
                    version: [1, 0, 0],
                },
            ],
        });
        await this.create("texts/languages.json", "{}");
        await this.create("texts/en_US.lang", "pack.name=NONE");
        await this.create("entities/example.json", "{}");
    }

    /** @returns {Object} */
    getManifest() {
        if (!this.exists("/manifest.json")) {
            this.manager.error(
                "The manifest file does not exist.",
                path.join(this.manager.path, "BP", "manifest.json")
            );
            return;
        }
        let content = fs.readFileSync(
            path.join(this.manager.path, "BP", "manifest.json")
        );
        return content;
    }

    /** @param {String} content */
    setManifest(content) {
        if (!fs.existsSync(path.join(this.manager.path, "BP", "manifest.json")))
            return;
        this.create("manifest.json", content);
        this.manager.log(`** Creating Manifest.json`);
    }

    /** @returns {String} */
    get(filepath) {
        let content = fs.readFileSync(
            path.join(this.manager.path, "BP", filepath),
            { encoding: "utf8" }
        );
        return content;
    }

    /** @returns {Boolean} */
    exists(filepath) {
        return fs.existsSync(path.join(this.manager.path, "BP", filepath));
    }

    /**
     * @param {String} filepath
     * @param {String} content
     */
    async create(filepath, content) {
        const dirs = path.dirname(path.join(this.manager.path, "BP", filepath));
        this.manager.log(`** Creating ${filepath}`);
        fs.mkdir(dirs, { recursive: true }, async () => {
            fs.writeFileSync(
                path.join(this.manager.path, "BP", filepath),
                content,
                { encoding: "utf-8" }
            );
            this.manager.success(` BP `.bgBlue + ` âˆš Created ${filepath}`);
        });
    }
}

module.exports = AddonBehavior;
