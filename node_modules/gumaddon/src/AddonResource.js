const path = require('path');
const fs = require("fs");
const uuid = require("uuid");

class AddonResource {
    constructor(manager) {
        this.manager = manager;
    }

    setup() {
        this.setManifest({
            "format_version": 2,
            "header": {
                "description": "pack.description",
                "name": "pack.name",
                "uuid": uuid.v4(),
                "min_engine_version": [
                    1,
                    20,
                    40
                ],
                "version": [
                    1,
                    0,
                    0
                ]
            },
            "modules": [
                {
                    "type": "resources",
                    "uuid": uuid.v4(),
                    "version": [
                        1,
                        0,
                        0
                    ]
                }
            ]
        });
        this.create("texts/languages.json", "{}" );
        this.create("texts/en_US.lang", "pack.name=NONE");
        this.create("entities/example.json", "{}");
    }

    /** @returns {String} */
    getManifest() {
        let content = fs.readFileSync(path.join(this.manager.path, "RP", "manifest.json"));
        return JSON.parse(content);
    }

    /** @param {String} content */
    setManifest( content ) {
        if(!fs.existsSync(path.join(this.manager.path, "RP", "manifest.json"))) return;
        this.create("manifest.json", JSON.stringify(content, null, 4));
        this.manager.log(`** Creating Manifest.json`);
    }

    /** @returns {String} */
    get(filepath) {
        let content = fs.readFileSync(path.join(this.manager.path, "RP", filepath), {encoding: "utf8"});
        return content;
    }

    /** 
     * @param {String} filepath
     * @param {String} content
     */
    async create(filepath, content) {
        const dirs = path.dirname(path.join(this.manager.path, "RP", filepath));
        fs.mkdir(dirs, {recursive: true}, () => {
            fs.writeFileSync(path.join(this.manager.path, "RP", filepath), content, {encoding: "utf-8"});
            this.manager.success(` RP `.bgCyan + ` âˆš Created ${filepath}`);
        });
    }
}

module.exports = AddonResource;